{"version":3,"file":"bundle.js","sources":["../tmp/redux.js","../src/app.js"],"sourcesContent":["var babelHelpers = {};\n\nbabelHelpers.extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nbabelHelpers;\n\nvar fnToString = function (fn) {\n  return Function.prototype.toString.call(fn);\n};\nvar objStringValue = fnToString(Object);\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  var proto = typeof obj.constructor === 'function' ? Object.getPrototypeOf(obj) : Object.prototype;\n\n  if (proto === null) {\n    return true;\n  }\n\n  var constructor = proto.constructor;\n\n  return typeof constructor === 'function' && constructor instanceof constructor && fnToString(constructor) === objStringValue;\n}\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = {\n  INIT: '@@redux/INIT'\n};\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [initialState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nfunction createStore(reducer, initialState) {\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = initialState;\n  var listeners = [];\n  var isDispatching = false;\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    listeners.push(listener);\n    var isSubscribed = true;\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n      var index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    listeners.slice().forEach(function (listener) {\n      return listener();\n    });\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  };\n}\n\n/**\n * Applies a function to every key-value pair inside an object.\n *\n * @param {Object} obj The source object.\n * @param {Function} fn The mapper function that receives the value and the key.\n * @returns {Object} A new object that contains the mapped values for the keys.\n */\nfunction mapValues(obj, fn) {\n  return Object.keys(obj).reduce(function (result, key) {\n    result[key] = fn(obj[key], key);\n    return result;\n  }, {});\n}\n\n/**\n * Picks key-value pairs from an object where values satisfy a predicate.\n *\n * @param {Object} obj The object to pick from.\n * @param {Function} fn The predicate the values must satisfy to be copied.\n * @returns {Object} The object with the values that satisfied the predicate.\n */\nfunction pick(obj, fn) {\n  return Object.keys(obj).reduce(function (result, key) {\n    if (fn(obj[key])) {\n      result[key] = obj[key];\n    }\n    return result;\n  }, {});\n}\n\n/* eslint-disable no-console */\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';\n\n  return 'Reducer \"' + key + '\" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.';\n}\n\nfunction getUnexpectedStateKeyWarningMessage(inputState, outputState, action) {\n  var reducerKeys = Object.keys(outputState);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return reducerKeys.indexOf(key) < 0;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerSanity(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\nfunction combineReducers(reducers) {\n  var finalReducers = pick(reducers, function (val) {\n    return typeof val === 'function';\n  });\n  var sanityError;\n\n  try {\n    assertReducerSanity(finalReducers);\n  } catch (e) {\n    sanityError = e;\n  }\n\n  var defaultState = mapValues(finalReducers, function () {\n    return undefined;\n  });\n\n  return function combination() {\n    var state = arguments.length <= 0 || arguments[0] === undefined ? defaultState : arguments[0];\n    var action = arguments[1];\n\n    if (sanityError) {\n      throw sanityError;\n    }\n\n    var hasChanged = false;\n    var finalState = mapValues(finalReducers, function (reducer, key) {\n      var previousStateForKey = state[key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(key, action);\n        throw new Error(errorMessage);\n      }\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n      return nextStateForKey;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateKeyWarningMessage(state, finalState, action);\n      if (warningMessage) {\n        console.error(warningMessage);\n      }\n    }\n\n    return hasChanged ? finalState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(undefined, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null || actionCreators === undefined) {\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }\n\n  return mapValues(actionCreators, function (actionCreator) {\n    return bindActionCreator(actionCreator, dispatch);\n  });\n}\n\n/**\n * Composes single-argument functions from right to left.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing functions from right to\n * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  return function (arg) {\n    return funcs.reduceRight(function (composed, f) {\n      return f(composed);\n    }, arg);\n  };\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (next) {\n    return function (reducer, initialState) {\n      var store = next(reducer, initialState);\n      var dispatch = store.dispatch;\n      var chain = [];\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function (action) {\n          return dispatch(action);\n        }\n      };\n      chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      dispatch = compose.apply(undefined, chain)(store.dispatch);\n\n      return babelHelpers.extends({}, store, {\n        dispatch: dispatch\n      });\n    };\n  };\n}\n\nexport { createStore, combineReducers, bindActionCreators, applyMiddleware, compose };","import {combineReducers} from 'redux'\n\nconst dummyReducer = (state, action) => state\nconst reducers = combineReducers([dummyReducer])\n\nreducers({}, {type: 'HI'})\n"],"names":[],"mappings":"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"}